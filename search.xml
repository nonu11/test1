<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单端口扫描工具]]></title>
    <url>%2F2017%2F09%2F03%2F%E7%AE%80%E5%8D%95%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[这是一个简单的端口扫描工具，可以实现一般的端口扫描功能。 由Python编写，所以效率略低@_@ 源代码： ‘’’# ！bin/usr/python/bin’’’‘’’# _coding_:utf-8’’’ import socketimport threadingimport time socket.setdefaulttimeout(3)mlock = threading.RLock() def socket_port(ip, port): try: if port &gt;= 65535: print(u”端口扫描结束 0-65535”) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) result = s.connect_ex((ip, port)) if (result == 0): mlock.acquire() #加锁 print(ip, u”:”, port, u”端口开放”) mlock.release() #释放锁 s.close() except: print(u”异常2”) def ip_port(data): try: t = time.time() for i in range(80, 65535): threading.Thread(target=socket_port(data, int(i))).start() print(u”扫描端口完成用时 time:%f” % (time.time() - t)) except: print(u”异常1”) if name == ‘main‘: ip_port(“127.0.0.1”) 代码下载地址：https://github.com/zhangmuran/Scan_port]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>port</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片与字符的故事]]></title>
    <url>%2F2017%2F08%2F31%2F%E5%9B%BE%E7%89%87%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%9A%84%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[#一、介绍今天我们来聊聊图片与字符画的故事。 这是一个有趣的Python小项目，可以将一张图片转化成由无数的字符组成的图像。 接下来看看如何实现它。 #二、原理 字符画是一系列字符的组合，我们可以把字符看作是比较大块的像素，一个字符能表现一种颜色，字符的种类越多，可以表现的颜色也越多，图片也会更有层次感。要实现图片到字符的转换，就要将图片每个像素的RGB值转换成不同的灰度值，然后让每个灰度值对应一个字符，从而实现图片到字符画的转换。 灰度值：指黑白图像中点的颜色深度，范围一般从0到255，白色为255，黑色为0，故黑白图片也称灰度图像 RGB值到灰度值的转换公式： gray ＝ 0.2126 * r + 0.7152 * g + 0.0722 * b #三、程序 安装依赖库 PIL 是一个 Python 图像处理库，是此程序要使用的重要工具，安装 pillow（PIL）库。 pip install pillow 导入库要是用库，就需要先将库导入到程序中来。 from PIL import Image import argparse RGB值转字符函数： def get_char(r,g,b,alpha = 256): if alpha == 0: return &apos; &apos; length = len(ascii_char) gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b) unit = (256.0 + 1)/length return ascii_char[int(gray/unit)] 完整代码 from PIL import Imageimport argparse parser = argparse.ArgumentParser()parser.add_argument(‘file’)parser.add_argument(‘-o’, ‘–output’)parser.add_argument(‘–width’, type = int, default = 80) #输出字符画宽parser.add_argument(‘–height’, type = int, default = 80) #输出字符画高 args = parser.parse_args() IMG = args.fileWIDTH = args.widthHEIGHT = args.heightOUTPUT = args.output asciichar = list(“$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-+~&lt;&gt;i!lI;:,\”^`’. “) def get_char(r,g,b,alpha = 256): if alpha == 0: return ‘ ‘ length = len(ascii_char) gray = int(0.2126 r + 0.7152 g + 0.0722 * b) unit = (256.0 + 1)/length return ascii_char[int(gray/unit)] if name == ‘main‘: im = Image.open(IMG) im = im.resize((WIDTH,HEIGHT), Image.NEAREST) txt = &quot;&quot; for i in range(HEIGHT): for j in range(WIDTH): txt += get_char(*im.getpixel((j,i))) txt += &apos;\n&apos; print txt #字符画输出到文件 if OUTPUT: with open(OUTPUT,&apos;w&apos;) as f: f.write(txt) else: with open(&quot;output.txt&quot;,&apos;w&apos;) as f: f.write(txt) 代码下载地址：https://github.com/zhangmuran/photos.git #四、最终效果 原图是这样： 效果图如下：]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫从入门到放弃]]></title>
    <url>%2F2017%2F03%2F05%2F2017-03-05-%E7%88%AC%E8%99%AB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%2F</url>
    <content type="text"><![CDATA[#已放弃#]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客]]></title>
    <url>%2F2016%2F10%2F15%2F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[我的博客第一天 .今天开始，我将记录生活。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F09%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
